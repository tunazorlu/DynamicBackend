@page "/tables"
@using Shared.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<h3>Database Tables</h3>

@if (tables == null)
{
    <p>Loading...</p>
}
else if (!tables.Any())
{
    <p>No tables available.</p>
}
else
{
    <table class="table-striped table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Columns</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var table in tables)
            {
                <tr>
                    <td>@table.Name</td>
                    <td>
                        <ul>
                            @foreach (var column in table.Columns)
                            {
                                <li>@column.Name (@column.DataType)</li>
                            }
                        </ul>
                    </td>
                    <td>@table.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTable(table.Name)">Düzenle</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTable(table.Name)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MetaTableDto> tables;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tables = await Http.GetFromJsonAsync<List<MetaTableDto>>("https://localhost:5002/api/DynamicTable");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching tables: {ex.Message}");
        }
    }

    private void EditTable(string tableName)
    {
        NavigationManager.NavigateTo($"/edit-table/{tableName}");
    }

    private async Task DeleteTable(string tableName)
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete table '{tableName}'?");
        if (confirmed)
        {
            try
            {
                var response = await Http.DeleteAsync($"https://localhost:5002/api/DynamicTable/{tableName}");
                response.EnsureSuccessStatusCode();
                tables.RemoveAll(t => t.Name == tableName);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting table: {ex.Message}");
            }
        }
    }
}