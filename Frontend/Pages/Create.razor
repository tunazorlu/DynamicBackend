@page "/create-table"
@using System.Net.Http.Json
@using Shared.DTOs
@using System.ComponentModel
@using CreateColumnDto = Shared.DTOs.CreateColumnDto
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Create Dynamic Table</MudText>

        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudTextField T="string" Label="Table Name" @bind-Value="tableDto.TableName" Required="true"
                RequiredError="Table name is required"
                Validation="@(new Func<string, IEnumerable<string>>(ValidateTableName))" Immediate="true"
                Class="mb-4" />

            <MudExpansionPanels>
                @foreach (var column in tableDto.Columns)
                {
                    <MudExpansionPanel
                        Text="@(string.IsNullOrEmpty(column.Name) ? "New Column" : $"{column.Name} ({column.DataType})")">
                        <div class="d-flex flex-column gap-4">
                            <MudTextField T="string" Label="Column Name" @bind-Value="column.Name" Required="true"
                                RequiredError="Column name is required"
                                Validation="@(new Func<string, IEnumerable<string>>(ValidateColumnName))"
                                Immediate="true" />

                            <MudSelect T="string" Label="Data Type" Value="@column.DataType"
                                ValueChanged="@((string val) => { column.DataType = val; StateHasChanged(); })"
                                Required="true">
                                @foreach (var dataType in dataTypes)
                                {
                                    <MudSelectItem T="string" Value="@dataType">@dataType</MudSelectItem>
                                }
                            </MudSelect>

                            <div class="d-flex gap-4">
                                <MudCheckBox T="bool" Label="Is Nullable" Checked="@column.IsNullable" CheckedChanged="@((bool value) => {
                                                 column.IsNullable = value;
                                                 Console.WriteLine($"IsNullable changed for {column.Name}: {value}");
                                                 StateHasChanged();
                                             })" Color="Color.Primary" />

                                <MudCheckBox T="bool" Label="Is Primary Key" Checked="@column.IsPrimaryKey" CheckedChanged="@((bool value) => {
                 column.IsPrimaryKey = value;
                 UpdateSqlPreview();  // Burada güncelleme çağrısı
                 StateHasChanged();
             })" Color="Color.Primary" />


                            </div>

                            <MudButton OnClick="@(() => RemoveColumn(column))" Color="Color.Error"
                                Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete">
                                Remove Column
                            </MudButton>
                        </div>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>

            <div class="d-flex gap-4 my-4">
                <MudButton OnClick="AddColumn" Color="Color.Primary" Variant="Variant.Outlined"
                    StartIcon="@Icons.Material.Filled.Add">
                    Add Column
                </MudButton>

                <MudButton OnClick="CreateTableAsync" Color="Color.Primary" Variant="Variant.Filled"
                    Disabled="!isFormValid || tableDto.Columns.Count == 0" Loading="@isProcessing">
                    Create Table
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>

    @if (showPreview)
    {
        <MudPaper Class="pa-4 mt-6">
            <MudText Typo="Typo.h6" Class="mb-4">SQL Preview</MudText>
            <MudHighlighter Text="@sqlPreview" HighlightedText="@tableDto.TableName" Class="mud-theme-primary" />
        </MudPaper>
    }
</MudContainer>

@code {
    private CreateTableDto tableDto = new()
        {
            TableName = "",
            Columns = new List<CreateColumnDto>()
        };

    private MudForm form;
    private bool isFormValid;
    private bool isProcessing;
    private bool showPreview;
    private string sqlPreview = "";

    private readonly string[] dataTypes = new[]
    {
"string",
"int",
"long",
"decimal",
"datetime",
"bool",
"double",
"guid"
};

    private IEnumerable<string> ValidateTableName(string tableName)
    {
        if (string.IsNullOrWhiteSpace(tableName))
            yield return "Table name is required";

        if (tableName.Length < 3)
            yield return "Table name must be at least 3 characters";

        if (!System.Text.RegularExpressions.Regex.IsMatch(tableName, "^[a-zA-Z][a-zA-Z0-9_]*$"))
            yield return "Table name must start with a letter and contain only letters, numbers, and underscores";
    }

    private IEnumerable<string> ValidateColumnName(string columnName)
    {
        if (string.IsNullOrWhiteSpace(columnName))
            yield return "Column name is required";

        if (!System.Text.RegularExpressions.Regex.IsMatch(columnName, "^[a-zA-Z][a-zA-Z0-9_]*$"))
            yield return "Column name must start with a letter and contain only letters, numbers, and underscores";

        if (tableDto.Columns.Count(c => c.Name.Equals(columnName, StringComparison.OrdinalIgnoreCase)) > 1)
            yield return "Column name must be unique";
    }

   /* private bool HasPrimaryKey(CreateColumnDto currentColumn)
    {
        if (tableDto.Columns == null) return false;

        foreach (var column in tableDto.Columns)
        {
            Console.WriteLine($"Column {column.Name} IsPrimaryKey: {column.IsPrimaryKey}");
        }

        var otherColumnHasPK = tableDto.Columns
        .Where(c => c != currentColumn)
        .Any(c => c.IsPrimaryKey);

        Console.WriteLine($"HasPrimaryKey check for {currentColumn.Name}: {otherColumnHasPK}");
        return otherColumnHasPK;
    }*/private bool HasPrimaryKey()
{
    // En az bir sütunun IsPrimaryKey olarak işaretlendiğini kontrol eder
    return tableDto.Columns.Any(c => c.IsPrimaryKey);
}


    private void AddColumn()
    {
        var newColumn = new CreateColumnDto
            {
                Name = string.Empty,
                DataType = "string",
                IsNullable = true,
                IsPrimaryKey = false
            };

        newColumn.PropertyChanged += (sender, args) => UpdateSqlPreview(); // Add event handler for new column
        tableDto.Columns.Add(newColumn);
        UpdateSqlPreview();
        StateHasChanged();
    }

    private void RemoveColumn(CreateColumnDto column)
    {
        tableDto.Columns.Remove(column);
        UpdateSqlPreview();
    }

    private void UpdateSqlPreview()
    {
        try
        {
            if (string.IsNullOrEmpty(tableDto.TableName))
            {
                showPreview = false;
                return;
            }

            var columns = tableDto.Columns
            .Where(c => !string.IsNullOrEmpty(c.Name))
            .ToList();

            Console.WriteLine($"Updating SQL Preview with {columns.Count} columns");
            foreach (var col in columns)
            {
                Console.WriteLine($"Column: {col.Name}, Type: {col.DataType}, IsPK: {col.IsPrimaryKey}");
            }

            var columnDefinitions = columns.Select(c =>
            {
                var def = $" {c.Name} {MapToPostgresType(c.DataType)}";
                if (c.IsPrimaryKey)
                    def += " PRIMARY KEY";
                if (!c.IsNullable && !c.IsPrimaryKey)
                    def += " NOT NULL";
                return def;
            });

            sqlPreview = $"CREATE TABLE {tableDto.TableName} (\n" +
            string.Join(",\n", columnDefinitions) +
            "\n);";

            showPreview = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in UpdateSqlPreview: {ex}");
        }
    }

    private string MapToPostgresType(string dataType) =>
    dataType.ToLower() switch
    {
        "string" => "text",
        "int" => "integer",
        "long" => "bigint",
        "decimal" => "numeric",
        "datetime" => "timestamp",
        "bool" => "boolean",
        "double" => "double precision",
        "guid" => "uuid",
        _ => "text"
    };

private async Task CreateTableAsync()
{
    try
    {
        // Debug için kolonları kontrol et
        Console.WriteLine("Checking columns for primary key:");
        foreach (var col in tableDto.Columns)
        {
            Console.WriteLine($"Column {col.Name} - IsPrimaryKey: {col.IsPrimaryKey}");
        }

        // Birincil anahtar olup olmadığını kontrol et
        var primaryKeyColumns = tableDto.Columns.Where(c => c.IsPrimaryKey).ToList();
        if (!primaryKeyColumns.Any())
        {
            Snackbar.Add("At least one column must be marked as primary key", Severity.Warning);
            return;
        }

        isProcessing = true;

        // Request'i JSON formatında logla
        var requestJson = System.Text.Json.JsonSerializer.Serialize(tableDto);
        Console.WriteLine($"Request payload: {requestJson}");

        // API çağrısını yap
        var response = await Http.PostAsJsonAsync("https://localhost:5002/api/DynamicTable", tableDto);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Table created successfully!", Severity.Success);
            NavigationManager.NavigateTo("/tables");
        }
        else
        {
            // Başarısız durumdaki hata mesajlarını işle
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error response: {responseContent}");

            var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            Snackbar.Add($"Error: {error?.message ?? "Unknown error occurred"}", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        // Hata durumunda log ve kullanıcı bilgilendirmesi
        Console.WriteLine($"Error in CreateTableAsync: {ex}");
        Snackbar.Add($"Error: {ex.Message}", Severity.Error);
    }
    finally
    {
        isProcessing = false;
    }
}


    public class ErrorResponse
    {
        public string message { get; set; }
        public string error { get; set; }
    }

    protected override void OnInitialized()
    {
        tableDto = new CreateTableDto
            {
                TableName = "",
                Columns = new List<CreateColumnDto>()
            };

        Console.WriteLine("Component initialized");
    }

    protected override void OnParametersSet()
    {
        if (tableDto?.Columns != null)
        {
            foreach (var column in tableDto.Columns)
            {
                column.PropertyChanged -= ColumnPropertyChanged;
                column.PropertyChanged += ColumnPropertyChanged;
            }
        }
    }

    private void ColumnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        UpdateSqlPreview();
    }


    private void HandleColumnChange(CreateColumnDto column)
    {
        Console.WriteLine($"Before change - Column {column.Name}, IsPK: {column.IsPrimaryKey}");

        // Değişikliği zorla
        column = new CreateColumnDto
            {
                Name = column.Name,
                DataType = column.DataType,
                IsNullable = column.IsNullable,
                IsPrimaryKey = column.IsPrimaryKey
            };

        Console.WriteLine($"After change - Column {column.Name}, IsPK: {column.IsPrimaryKey}");
        StateHasChanged();
        UpdateSqlPreview();
    }
}
