// Pages/CreateTable.razor
@page "/create-table"
@using System.Net.Http.Json
@using Shared.DTOs
@using CreateColumnDto = Shared.DTOs.CreateColumnDto
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Create Dynamic Table</MudText>

        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudTextField T="string" 
                         Label="Table Name" 
                         @bind-Value="tableDto.TableName"
                         Required="true"
                         RequiredError="Table name is required"
                         Validation="@(new Func<string, IEnumerable<string>>(ValidateTableName))"
                         Immediate="true"
                         Class="mb-4"/>

            <MudExpansionPanels>
                @foreach (var column in tableDto.Columns)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudText>
                                    @(string.IsNullOrEmpty(column.Name) ? "New Column" : column.Name)
                                    (@column.DataType)
                                </MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="d-flex flex-column gap-4">
                                <MudTextField T="string"
                                            Label="Column Name"
                                            @bind-Value="column.Name"
                                            Required="true"
                                            RequiredError="Column name is required"
                                            Validation="@(new Func<string, IEnumerable<string>>(ValidateColumnName))"
                                            Immediate="true"/>

                                <MudSelect T="string" 
                                         Label="Data Type" 
                                         @bind-Value="column.DataType"
                                         Required="true">
                                    @foreach (var dataType in dataTypes)
                                    {
                                        <MudSelectItem Value="@dataType">@dataType</MudSelectItem>
                                    }
                                </MudSelect>

                                <div class="d-flex gap-4">
                                    <MudCheckBox T="bool" 
                                               Label="Is Nullable" 
                                               Color="Color.Primary"
                                               @bind-Checked="column.IsNullable"/>

                                    <MudCheckBox T="bool" 
                                               Label="Is Primary Key" 
                                               Color="Color.Primary"
                                               @bind-Checked="column.IsPrimaryKey"
                                               Disabled="@HasPrimaryKey(column)"/>
                                </div>

                                <MudButton OnClick="@(() => RemoveColumn(column))" 
                                         Color="Color.Error" 
                                         Variant="Variant.Outlined"
                                         StartIcon="@Icons.Material.Filled.Delete">
                                    Remove Column
                                </MudButton>
                            </div>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>

            <div class="d-flex gap-4 my-4">
                <MudButton OnClick="AddColumn" 
                          Color="Color.Primary" 
                          Variant="Variant.Outlined"
                          StartIcon="@Icons.Material.Filled.Add">
                    Add Column
                </MudButton>

                <MudButton OnClick="CreateTableAsync" 
                          Color="Color.Primary" 
                          Variant="Variant.Filled"
                          Disabled="!isFormValid || tableDto.Columns.Count == 0"
                          Loading="@isProcessing">
                    Create Table
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>

    @if (showPreview)
    {
        <MudPaper Class="pa-4 mt-6">
            <MudText Typo="Typo.h6" Class="mb-4">SQL Preview</MudText>
            <MudHighlighter Text="@sqlPreview" 
                           HighlightedText="@tableDto.TableName"
                           Class="mud-theme-primary"/>
        </MudPaper>
    }
</MudContainer>

@code {
    private CreateTableDto tableDto = new()
    {
        TableName = "",
        Columns = new List<CreateColumnDto>()
    };

    private MudForm form;
    private bool isFormValid;
    private bool isProcessing;
    private bool showPreview;
    private string sqlPreview = "";

    private readonly string[] dataTypes = new[]
    {
        "string",
        "int",
        "long",
        "decimal",
        "datetime",
        "bool",
        "double",
        "guid"
    };

    private IEnumerable<string> ValidateTableName(string tableName)
    {
        if (string.IsNullOrWhiteSpace(tableName))
            yield return "Table name is required";
        
        if (tableName.Length < 3)
            yield return "Table name must be at least 3 characters";
        
        if (!System.Text.RegularExpressions.Regex.IsMatch(tableName, "^[a-zA-Z][a-zA-Z0-9_]*$"))
            yield return "Table name must start with a letter and contain only letters, numbers, and underscores";
    }

    private IEnumerable<string> ValidateColumnName(string columnName)
    {
        if (string.IsNullOrWhiteSpace(columnName))
            yield return "Column name is required";
        
        if (!System.Text.RegularExpressions.Regex.IsMatch(columnName, "^[a-zA-Z][a-zA-Z0-9_]*$"))
            yield return "Column name must start with a letter and contain only letters, numbers, and underscores";
        
        if (tableDto.Columns.Count(c => c.Name.Equals(columnName, StringComparison.OrdinalIgnoreCase)) > 1)
            yield return "Column name must be unique";
    }

    private bool HasPrimaryKey(CreateColumnDto currentColumn)
    {
        return tableDto.Columns.Any(c => c != currentColumn && c.IsPrimaryKey);
    }

    private void AddColumn()
    {
        var newColumn = new CreateColumnDto
        {
            Name = string.Empty,
            DataType = "string",
            IsNullable = true,
            IsPrimaryKey = false
        };
    
        StateHasChanged(); // State'i强制 güncelle
        tableDto.Columns.Add(newColumn);
        UpdateSqlPreview();
    }

    private void RemoveColumn(CreateColumnDto column)
    {
        tableDto.Columns.Remove(column);
        UpdateSqlPreview();
    }

    private void UpdateSqlPreview()
    {
        if (string.IsNullOrEmpty(tableDto.TableName) || !tableDto.Columns.Any())
        {
            showPreview = false;
            return;
        }

        var columnDefinitions = tableDto.Columns
            .Where(c => !string.IsNullOrEmpty(c.Name))
            .Select(c =>
            {
                var def = $"    {c.Name} {MapToPostgresType(c.DataType)}";
                if (c.IsPrimaryKey)
                    def += " PRIMARY KEY";
                if (!c.IsNullable)
                    def += " NOT NULL";
                return def;
            });

        sqlPreview = $"CREATE TABLE {tableDto.TableName} (\n" +
                    string.Join(",\n", columnDefinitions) +
                    "\n);";
        
        showPreview = true;
    }

    private string MapToPostgresType(string dataType) =>
        dataType.ToLower() switch
        {
            "string" => "text",
            "int" => "integer",
            "long" => "bigint",
            "decimal" => "numeric",
            "datetime" => "timestamp",
            "bool" => "boolean",
            "double" => "double precision",
            "guid" => "uuid",
            _ => "text"
        };

    private async Task CreateTableAsync()
    {
        try
        {
            isProcessing = true;
            
            var response = await Http.PostAsJsonAsync("https://localhost:5002/api/DynamicTable", tableDto);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Table created successfully!", Severity.Success);
                NavigationManager.NavigateTo("/tables");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error creating table: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    protected override void OnParametersSet()
    {
        if (tableDto != null)
        {
            tableDto.PropertyChanged += (sender, args) => UpdateSqlPreview();
            if (tableDto.Columns != null)
            {
                foreach (var column in tableDto.Columns)
                {
                    column.PropertyChanged += (sender, args) => UpdateSqlPreview();
                }
            }
        }
    }
}